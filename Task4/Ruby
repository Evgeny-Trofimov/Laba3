n, m = gets.split.map(&:to_i)
sequence = gets.split.map(&:to_i)

# Prefix sums for quick range sum calculation
prefix = Array.new(n + 1, 0)
(0...n).each do |i|
  prefix[i + 1] = prefix[i] + sequence[i]
end

# Dynamic programming: dp[i] - maximum score difference the current player can get starting at position i
dp = Array.new(n + 1, 0)

(n - 1).downto(0) do |i|
  max_diff = -1_000_000_000  # equivalent to -1e9
  # Player can take 1 to m numbers
  (1..m).each do |j|
    break if i + j > n  # don't go out of bounds
    current_sum = prefix[i + j] - prefix[i]
    # Score difference = current sum - opponent's best result
    max_diff = [max_diff, current_sum - dp[i + j]].max
  end
  dp[i] = max_diff
end

# If the difference is positive - Pavel wins
puts dp[0] > 0 ? "1" : "0"
