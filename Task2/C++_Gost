#include <iostream>
#include <vector>
#include <iomanip>
#include <random>
#include <cmath>
#include <algorithm>
#include <thread>
#include <mutex>
#include <atomic>
#include <chrono>

using namespace std;

// Глобальные переменные для синхронизации
mutex mtx;
atomic<bool> stop_flag(false);
atomic<int> generated_count(0);

// Генератор случайных чисел
mt19937 gen(random_device{}());

// Функция модульного возведения в степень
uint64_t mod_pow(uint64_t a, uint64_t b, uint64_t n) {
    uint64_t result = 1;
    a %= n;
    while (b > 0) {
        if (b % 2 == 1) {
            result = (result * a) % n;
        }
        b >>= 1;
        a = (a * a) % n;
    }
    return result;
}

// Решето Эратосфена
vector<int> sieve(int limit) {
    vector<bool> is_prime(limit + 1, true);
    is_prime[0] = is_prime[1] = false;
    
    for (int p = 2; p * p <= limit; ++p) {
        if (is_prime[p]) {
            for (int i = p * p; i <= limit; i += p) {
                is_prime[i] = false;
            }
        }
    }
    
    vector<int> primes;
    for (int i = 2; i <= limit; ++i) {
        if (is_prime[i]) primes.push_back(i);
    }
    return primes;
}

// Тест Миллера-Рабина
bool miller_rabin(uint64_t n, int iterations = 5) {
    if (n < 2) return false;
    if (n == 2 || n == 3) return true;
    if (n % 2 == 0) return false;

    uint64_t d = n - 1;
    int s = 0;
    while (d % 2 == 0) {
        d /= 2;
        s++;
    }

    for (int i = 0; i < iterations; ++i) {
        uint64_t a = uniform_int_distribution<uint64_t>(2, n - 2)(gen);
        uint64_t x = mod_pow(a, d, n);
        
        if (x == 1 || x == n - 1) continue;
        
        bool composite = true;
        for (int j = 0; j < s - 1; ++j) {
            x = mod_pow(x, 2, n);
            if (x == n - 1) {
                composite = false;
                break;
            }
        }
        if (composite) return false;
    }
    return true;
}

// Генерация простого числа заданной битовой длины
uint64_t generate_prime_candidate(int bits) {
    uint64_t min_val = 1ULL << (bits - 1);
    uint64_t max_val = (1ULL << bits) - 1;
    
    uniform_int_distribution<uint64_t> dist(min_val, max_val);
    uint64_t candidate;
    
    do {
        candidate = dist(gen);
        // Делаем число нечетным
        if (candidate % 2 == 0) candidate++;
    } while (candidate < min_val || candidate > max_val);
    
    return candidate;
}

// Функция генерации простого числа
void generate_primes(int bits, vector<uint64_t>& primes, vector<string>& results, 
                    vector<int>& attempts, const vector<int>& small_primes) {
    int local_attempts = 0;
    
    while (!stop_flag && generated_count < 10) {
        local_attempts++;
        uint64_t candidate = generate_prime_candidate(bits);
        
        // Проверка на делимость на маленькие простые
        bool divisible = false;
        for (int p : small_primes) {
            if (candidate % p == 0 && p != candidate) {
                divisible = true;
                break;
            }
        }
        if (divisible) continue;
        
        // Тест Миллера-Рабина
        if (miller_rabin(candidate)) {
            lock_guard<mutex> lock(mtx);
            
            // Проверка на уникальность
            if (find(primes.begin(), primes.end(), candidate) == primes.end()) {
                primes.push_back(candidate);
                results.push_back("+");
                attempts.push_back(local_attempts);
                generated_count++;
                local_attempts = 0;
                
                if (generated_count >= 10) {
                    stop_flag = true;
                }
            }
        }
    }
}

int main() {
    // Ввод битовой длины
    int bits;
    do {
        cout << "Введите размерность простого числа (4-64 бит): ";
        cin >> bits;
        if (cin.fail() || bits < 4 || bits > 64) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Ошибка! Введите число от 4 до 64.\n";
        } else {
            break;
        }
    } while (true);

    // Генерация малых простых чисел для предварительной проверки
    vector<int> small_primes = sieve(500);
    
    cout << "\nПростые числа до 500:\n";
    for (size_t i = 0; i < small_primes.size(); ++i) {
        cout << small_primes[i] << (i % 10 == 9 ? "\n" : " ");
    }
    cout << "\n\n";

    // Векторы для хранения результатов
    vector<uint64_t> primes;
    vector<string> results;
    vector<int> attempts;
    
    // Определяем количество потоков
    const int num_threads = thread::hardware_concurrency();
    vector<thread> threads;
    
    // Запускаем потоки
    for (int i = 0; i < num_threads; ++i) {
        threads.emplace_back(generate_primes, bits, ref(primes), ref(results), 
                           ref(attempts), cref(small_primes));
    }
    
    // Ожидаем завершения или таймаут (10 секунд)
    auto start = chrono::steady_clock::now();
    while (chrono::steady_clock::now() - start < chrono::seconds(10)) {
        if (generated_count >= 10) break;
        this_thread::sleep_for(chrono::milliseconds(100));
    }
    stop_flag = true;
    
    // Ожидаем завершения потоков
    for (auto& t : threads) {
        if (t.joinable()) t.join();
    }
    
    // Обрезаем до 10 чисел, если их больше
    if (primes.size() > 10) {
        primes.resize(10);
        results.resize(10);
        attempts.resize(10);
    }
    
    // Вывод результатов в старом формате
    if (!primes.empty()) {
        cout << "\nРезультаты генерации простых чисел (" << bits << " бит):\n\n";
        
        // Заголовок таблицы
        cout << "|    Num    |";
        for (size_t i = 0; i < primes.size(); ++i) {
            cout << setw(6) << i+1 << " |";
        }
        
        // Разделительная строка
        cout << "\n|-----------|";
        for (size_t i = 0; i < primes.size(); ++i) {
            cout << "-------|";
        }
        
        // Строка с числами
        cout << "\n|     P     |";
        for (uint64_t num : primes) {
            cout << setw(6) << num << " |";
        }
        
        // Строка с результатами проверки
        cout << "\n| Результат |";
        for (const string& res : results) {
            cout << setw(6) << res << " |";
        }
        
        // Строка с количеством попыток
        cout << "\n|     K     |";
        for (int att : attempts) {
            cout << setw(6) << att << " |";
        }
        
        cout << endl;
    }
    
    return 0;
}
