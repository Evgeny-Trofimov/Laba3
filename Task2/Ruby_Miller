require 'prime'
require 'securerandom'
require 'bigdecimal'

# Функция генерации случайного числа в диапазоне [min, max]
def random_generator(min, max)
  SecureRandom.random_number(max - min + 1) + min
end

# Проверка, является ли число простым (упрощенная версия)
def is_prime(i, primes)
  primes.each do |prime|
    return false if i % prime == 0
  end
  true
end

# Генерация простых чисел до p методом решета Эратосфена
def eratosthenes_sieve(p)
  primes = [2]
  (3..p).step(2) do |i|
    primes << i if is_prime(i, primes)
  end
  primes
end

# Функция для возведения в степень по модулю
def mod_pow(number, power, n)
  return 0 if n == 0
  result = 1
  number = number % n

  while power > 0
    if power.odd?
      result = (result * number) % n
    end
    power >>= 1
    number = (number * number) % n
  end
  result
end

# Проверка малой теоремы Ферма
def fermat_test(a, x, p)
  return false if p <= 1
  mod_pow(a, x, p) == 1
end

# Тест Миллера-Рабина
def miller_test(n, factors, t)
  return false if n <= 1
  return true if n == 2
  return false if n.even?

  t.times do
    a = random_generator(2, n - 2)
    unless fermat_test(a, n - 1, n)
      return false
    end
  end

  factors.each do |q|
    next if q == 0
    all_a_equal_one = true

    t.times do
      a = random_generator(2, n - 2)
      unless fermat_test(a, (n - 1) / q, n)
        all_a_equal_one = false
        break
      end
    end

    return false if all_a_equal_one
  end

  true
end

# Подсчет количества бит в числе
def count_bits(number)
  return 1 if number == 0
  Math.log2(number).to_i + 1
end

# Проверка попадания числа в битовый диапазон
def within_bit_range(number, bit_count, formin)
  num_bits = count_bits(number)
  return 1 if num_bits < bit_count - formin.abs
  return 2 if num_bits > bit_count
  3
end

# Основная функция генерации простого числа
def create_num(k, numbers, results, attempts, primes)
  q = []
  m = 1
  temp_m = 1
  n = 0
  target_bit_count_m = k - 1
  temp_errors = 0
  formin = 0

  formin = -1 if k < 7 && k > 4
  formin = -2 if k == 4

  max_attempts = 1_000_000
  attempts_made = 0

  while attempts_made < max_attempts
    qi = primes[random_generator(0, primes.size - 1)]
    ai = random_generator(1, 12)
    temp_m *= qi**ai

    range = within_bit_range(temp_m, target_bit_count_m, formin)
    if range == 2
      m = 1
      temp_m = 1
      q.clear
    elsif range == 1
      q << qi
    else
      m = temp_m
      q << qi
      n = 2 * m + 1
      if miller_test(n, q, 1)
        break
      else
        temp_errors += 1
        m = 1
        temp_m = 1
        n = 0
        q.clear
      end
    end
    attempts_made += 1
  end

  return false if attempts_made >= max_attempts
  return false if numbers.include?(n)

  temp_errors2 = 0
  iter = 100
  while iter >= 10
    temp_errors2 = 0
    iter.times do
      temp_errors2 += 1 unless miller_test(n, q, 1)
    end
    break if temp_errors2 <= iter / 10
    iter -= 10
  end

  results << (temp_errors2 <= iter / 10 ? "+" : "-")
  numbers << n
  attempts << temp_errors
  true
end

# Функция для безопасного ввода
def get_single_word_input(prompt)
  loop do
    print prompt
    input = gets.chomp
    word = input.split.first

    if word.nil?
      puts "Пустой ввод. Пожалуйста, введите число."
      next
    end

    if input.split.size > 1
      puts "Неправильное количество. Пожалуйста, введите одно число."
      next
    end

    unless word =~ /^\d+$/
      puts "Некорректное число. Попробуйте снова."
      next
    end

    value = word.to_i
    if value <= 3 || value > 20
      puts "Число должно быть в диапазоне 4-20. Попробуйте снова."
      next
    end

    return value
  end
end

# Главная функция
def main
  numbers = []
  results = []
  attempts = []

  t = get_single_word_input("Введите размерность простого числа (4-20 бит): ")

  primes = eratosthenes_sieve(500)
  puts "Простые числа до 500 (Решето Эратосфена):\n\n"
  primes.each_slice(10) do |slice|
    puts slice.join(" ")
  end
  puts "\n"

  10.times do
    unless create_num(t, numbers, results, attempts, primes)
      puts "Не удалось сгенерировать уникальное простое число после нескольких попыток."
      break
    end
  end

  unless numbers.empty?
    puts "\nРезультаты генерации простых чисел (#{t} бит):\n\n"
    puts "|    Num    |" + numbers.each_with_index.map { |_, i| "%6d |" % (i+1) }.join
    puts "|-----------|" + "-------|" * numbers.size
    puts "|     P     |" + numbers.map { |num| "%6d |" % num }.join
    puts "| Результат |" + results.map { |res| "%6s |" % res }.join
    puts "|     K     |" + attempts.map { |att| "%6d |" % att }.join
  end
end

main
