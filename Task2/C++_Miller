#include <iostream>  
#include <vector>    
#include <iomanip>   
#include <random>   
#include <cmath>    
#include <algorithm> 
#include <string>    
#include <sstream>   

using namespace std; 

// Функция генерации случайного числа в диапазоне [min, max]
int RandomGenerator(int min, int max) {
    random_device rd;         // Источник энтропии
    mt19937 gen(rd());        // Генератор Mersenne Twister
    uniform_int_distribution<int> dis(min, max); // Равномерное распределение
    return dis(gen);          // Возвращаем случайное число
}

// Проверка, является ли число i простым (делится ли на простые из вектора prime)
bool IsPrime(int i, vector<int>& prime) {
    for (int j = 0; j < prime.size(); j++) { // Перебираем все простые числа
        if (i % prime[j] == 0) {            // Если делится без остатка - не простое
            return false;                   
        }
    }
    return true; // Если не делится ни на одно - простое
}

// Генерация простых чисел до p методом решета Эратосфена
vector<int> IsPrimeEratosfen(int p) {
    vector<int> primeNumb;    // Вектор для хранения простых чисел
    primeNumb.push_back(2);   // Добавляем первое простое число - 2
    for (int i = 3; i < p; i += 2) { // Проверяем только нечетные числа
        if (IsPrime(i, primeNumb)) { // Если число простое
            primeNumb.push_back(i);   
        }
    }
    return primeNumb; // Возвращаем вектор простых чисел
}

// Функция для возведения в степень по модулю
uint64_t mod(uint64_t number, uint64_t power, uint64_t n) {
    if (n == 0) return 0;          // Деление на ноль
    uint64_t ostatok = 1;          // Инициализация остатка
    while (power > 0) {            // Пока степень больше нуля
        if (power % 2 != 0) {      // Если степень нечетная
            ostatok = (ostatok * number) % n; // Умножаем на основание
        }
        power /= 2;                // Делим степень пополам
        number = (number * number) % n; // Возводим в квадрат основание
    }
    return ostatok; // Возвращаем результат
}

// Проверка малой теоремы Ферма: a^x mod p == 1
bool TeoremaFerma(int a, int x, int p) {
    if (p <= 1) return false;      // Простые числа > 1
    uint64_t result = mod(a, x, p); // Вычисляем a^x mod p
    return result == 1;            // Проверяем условие теоремы
}

// Тест Миллера-Рабина для проверки простоты числа n
bool MillerTest(int64_t n, const vector<int>& factors, int t) {
    if (n <= 1) return false;     // Простые > 1
    if (n == 2) return true;      // 2 - простое
    if (n % 2 == 0) return false; // Четные > 2 не простые

    // Проверка t случайных оснований
    for (int i = 0; i < t; i++) {
        int a = RandomGenerator(2, n - 2); // Случайное основание
        if (!TeoremaFerma(a, n - 1, n)) {  // Если теорема не выполняется
            return false;                   // Число составное
        }
    }

    // Дополнительные проверки для факторов
    for (int q : factors) {
        if (q == 0) continue;              // Пропускаем нули
        bool all_a_equal_one = true;       // Флаг проверки

        for (int i = 0; i < t; i++) {
            int a = RandomGenerator(2, n - 2);
            if (!TeoremaFerma(a, (n - 1) / q, n)) {
                all_a_equal_one = false;
                break;
            }
        }

        if (all_a_equal_one) {             // Если все проверки пройдены
            return false;                  // Число составное
        }
    }

    return true; // Если все тесты пройдены - вероятно простое
}

// Подсчет количества бит в числе
int countBits(uint64_t number) {
    if (number == 0) return 1;             // 0 занимает 1 бит
    return static_cast<int>(log2(number) + 1); // Формула для подсчета бит
}

// Проверка попадания числа в битовый диапазон
int isWithinBitRange(uint64_t number, int bitCount, int formin) {
    int numBits = countBits(number);       // Считаем биты
    if (numBits < bitCount - abs(formin)) return 1; // Меньше нижней границы
    if (numBits > bitCount) return 2;      // Превышает верхнюю границу
    return 3;                              // В пределах диапазона
}

// Основная функция генерации простого числа
bool createNum(int k, vector<int>& numbers, vector<string>& results, vector<int>& attempts, vector<int>& primes) {
    vector<int> q;                // Вектор для множителей
    int64_t m = 1;                // Произведение множителей
    int tempM = 1;                // Временное произведение
    int qi, ai;                   // Множитель и его степень
    int64_t n = 0;                // Кандидат в простые числа
    int targetBitCountM = k - 1;   // Нужное количество бит для m
    int tempOshibki = 0;          // Счетчик ошибок
    int formin = 0;               // Поправка для малых чисел
    
    // Настройка поправки для разных размерностей
    if (k < 7 && k > 4) {
        formin = -1;
    }
    else if (k == 4) {
        formin = -2;
    }

    int max_attempts = 1000000;    // Максимальное число попыток
    int attempts_made = 0;         // Счетчик попыток

    // Основной цикл генерации
    while (attempts_made < max_attempts) {
        qi = primes[RandomGenerator(0, primes.size() - 1)]; // Случайный простой множитель
        ai = RandomGenerator(1, 12);                       // Случайная степень
        tempM *= pow(qi, ai);                              // Умножаем на множитель
        
        // Проверка битового диапазона
        int range = isWithinBitRange(tempM, targetBitCountM, formin);
        if (range == 2) {          // Если превысили
            m = 1;                 // Сбрасываем
            tempM = 1;
            q.clear();
        }
        else if (range == 1) {     // Если меньше
            q.push_back(qi);       // Добавляем множитель
        }
        else {                    // Если в диапазоне
            m = tempM;            // Фиксируем m
            q.push_back(qi);
            n = 2 * m + 1;        // Формируем кандидата
            if (MillerTest(n, q, 1)) { // Проверяем на простоту
                break;             // Если простое - выходим
            }
            else {
                tempOshibki++;    // Увеличиваем счетчик ошибок
                m = 1;            // Сбрасываем
                tempM = 1;
                n = 0;
                q.clear();
            }
        }
        attempts_made++;          // Увеличиваем счетчик попыток
    }

    // Проверка на превышение максимального числа попыток
    if (attempts_made >= max_attempts) {
        return false;
    }

    // Проверка на уникальность числа
    if (find(numbers.begin(), numbers.end(), n) != numbers.end()) {
        return false;
    }

    // Дополнительные проверки (100 итераций теста Миллера)
    int tempOshibki2 = 0;
    int i;
    int iter = 100;
    while (iter >= 10) {
        tempOshibki2 = 0;
        for (i = 0; i < iter; i++) {
            if (!MillerTest(n, q, 1)) {
                tempOshibki2++;
            }
        }
        if (tempOshibki2 <= i / 10) {
            break;
        }
        iter -= 10;
    }

    // Запись результатов
    if (tempOshibki2 <= iter / 10) {
        results.push_back("+");
    }
    else {
        results.push_back("-");
    }
    numbers.push_back(n);
    attempts.push_back(tempOshibki);
    return true;
}

// Функция для безопасного ввода одного числа
int getSingleWordInput(const string& prompt) {
    string input;
    int value;

    while (true) {
        cout << prompt;
        getline(cin, input);

        istringstream iss(input);
        string word;
        if (!(iss >> word)) {
            cout << "Пустой ввод. Пожалуйста, введите число.\n";
            continue;
        }
        
        // Проверка на наличие лишних слов
        string extra;
        if (iss >> extra) {
            cout << "Неправильное количество. Пожалуйста, введите одно число.\n";
            continue;
        }

        // Проверка, что все символы - цифры
        bool valid = true;
        for (char c : word) {
            if (!isdigit(c)) {
                valid = false;
                break;
            }
        }
        if (!valid) {
            cout << "Некорректное число. Попробуйте снова.\n";
            continue;
        }

        // Преобразование и проверка диапазона
        istringstream(word) >> value;
        if (value <= 3 || value > 20) {
            cout << "Число должно быть в диапазоне 4-20. Попробуйте снова.\n";
            continue;
        }
        return value;
    }
}

int main() {
    vector<int> numbers;    // Вектор для хранения сгенерированных чисел
    vector<string> Res;     // Вектор для результатов проверки
    vector<int> K;          // Вектор для количества попыток
    int t = 0;              // Размерность в битах
    int input;              // Ввод пользователя

    // Получение ввода от пользователя
    while (true) {
        input = getSingleWordInput("Введите размерность простого числа (4-20 бит): ");
        break;
    }

    t = input; // Сохраняем размерность

    // Генерация простых чисел до 500
    vector<int> primes = IsPrimeEratosfen(500);
    cout << "Простые числа до 500 (Решето Эратосфена):\n" << endl;
    // Вывод простых чисел (по 10 в строке)
    for (size_t i = 0; i < primes.size(); ++i) {
        cout << primes[i] << (i % 10 == 9 ? "\n" : " ");
    }
    cout << "\n\n";

    // Генерация 10 простых чисел заданной размерности
    int generated = 0;
    int total_attempts = 0;
    const int MAX_TOTAL_ATTEMPTS = 1000000;
    
    while (generated < 10 && total_attempts < MAX_TOTAL_ATTEMPTS) {
        vector<int> current_numbers;
        vector<string> current_Res;
        vector<int> current_K;
        
        if (createNum(t, current_numbers, current_Res, current_K, primes)) {
            numbers.push_back(current_numbers.back());
            Res.push_back(current_Res.back());
            K.push_back(current_K.back());
            generated++;
        }
        total_attempts++;
    }

    if (generated < 10) {
        cout << "Предупреждение: удалось сгенерировать только " << generated << " из 10 чисел." << endl;
    }

    // Вывод результатов в виде таблицы
    if (!numbers.empty()) {
        cout << "\nРезультаты генерации простых чисел (" << t << " бит):\n\n";
        // Заголовок таблицы
        cout << "|    Num    |";
        for (size_t i = 0; i < numbers.size(); ++i) {
            cout << setw(6) << i+1 << " |";
        }
        cout << "\n|-----------|";
        for (size_t i = 0; i < numbers.size(); ++i) {
            cout << "-------|";
        }
        // Строка с числами
        cout << "\n|     P     |";
        for (int num : numbers) {
            cout << setw(6) << num << " |";
        }
        // Строка с результатами
        cout << "\n| Результат |";
        for (const string& res : Res) {
            cout << setw(6) << res << " |";
        }
        // Строка с количеством попыток
        cout << "\n|     K     |";
        for (int att : K) {
            cout << setw(6) << att << " |";
        }
        cout << endl;
    }

    return 0;
}
