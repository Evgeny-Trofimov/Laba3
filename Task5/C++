#include <iostream>   
#include <vector>       
#include <numeric>       // Для accumulate (суммирование)
#include <cmath>         
#include <iomanip>       

using namespace std;

// Глобальные переменные для хранения параметров
double Temp;      // Начальная температура кофе
double EnvT;      // Температура окружающей среды
double CoolC;     // Коэффициент охлаждения
int time_limit;   // Время охлаждения в секундах
vector<double> apox_vector; // Вектор для хранения коэффициентов аппроксимации

// Функция вычисления коэффициента корреляции
double korrel(const vector<double>& temperatures, double mean_y) {
    double sum_xy = 0, sum_x2 = 0, sum_y2 = 0;
    double mean_x = (time_limit - 1) / 2.0; // Среднее значение времени
    
    // Вычисляем суммы для формулы корреляции
    for (int i = 0; i < temperatures.size(); i++) {
        sum_xy += (i - mean_x) * (temperatures[i] - mean_y);
        sum_x2 += (i - mean_x) * (i - mean_x);
        sum_y2 += (temperatures[i] - mean_y) * (temperatures[i] - mean_y);
    }
    
    // Возвращаем коэффициент корреляции Пирсона
    return sum_xy / sqrt(sum_x2 * sum_y2);
}

// Функция линейной аппроксимации методом наименьших квадратов
pair<double, double> aprox(const vector<double>& x_vector, const vector<double>& y_vector) {
    double sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0;
    int n = x_vector.size(); // Количество точек
    
    // Вычисляем необходимые суммы
    for (int i = 0; i < n; i++) {
        sum_x += x_vector[i];
        sum_y += y_vector[i];
        sum_xy += x_vector[i] * y_vector[i];
        sum_x2 += x_vector[i] * x_vector[i];
    }
    
    // Вычисляем коэффициенты a и b для уравнения y = a*x + b
    double a = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x);
    double b = (sum_y - a * sum_x) / n;
    
    return make_pair(a, b);
}

// Основная функция моделирования охлаждения кофе
vector<pair<double, double>> coffee(double Temp, double EnvT, double CoolC, int time_limit) {
    vector<double> temperatures; // Вектор температур
    vector<double> times;        // Вектор времени
    vector<pair<double, double>> temp_corr; // Пары (температура, корреляция)
    
    // Моделируем охлаждение по закону Ньютона
    for (int t = 0; t <= time_limit; t++) {
        double temperature = EnvT + (Temp - EnvT) * exp(-CoolC * t);
        temperatures.push_back(temperature);
        times.push_back(t);
    }
    
    // Вычисляем коэффициенты аппроксимирующей прямой
    pair<double, double> aprox_coeffs = aprox(times, temperatures);
    double a = aprox_coeffs.first;
    double b = aprox_coeffs.second;
    
    // Сохраняем коэффициенты в глобальный вектор
    apox_vector = { a, b };
    
    // Вычисляем среднюю температуру и коэффициент корреляции
    double mean_y = accumulate(temperatures.begin(), temperatures.end(), 0.0) / temperatures.size();
    double corr = korrel(temperatures, mean_y);
    
    // Формируем результат - пары (температура, корреляция)
    for (int t = 0; t <= time_limit; t++) {
        temp_corr.push_back(make_pair(temperatures[t], corr));
    }
    
    return temp_corr;
}

int main() {
    // Ввод параметров от пользователя
    cout << "Введите начальную температуру кофе (°C): ";
    cin >> Temp;
    cout << "Введите температуру окружающей среды (°C): ";
    cin >> EnvT;
    cout << "Введите коэффициент охлаждения (dC): ";
    cin >> CoolC;
    cout << "Введите время охлаждения (секунды): ";
    cin >> time_limit;

    // Вычисление результатов
    vector<pair<double, double>> results = coffee(Temp, EnvT, CoolC, time_limit);

    // Вывод результатов анализа
    cout << "\nАНАЛИЗ ОХЛАЖДЕНИЯ КОФЕ" << endl;
    cout << "-----------------------" << endl;
    cout << "- Начальная температура: " << Temp << " °C" << endl;
    cout << "- Температура среды: " << EnvT << " °C" << endl;
    cout << "- Коэффициент охлаждения: " << CoolC << " dC" << endl;
    cout << "- Время моделирования: " << time_limit << " сек" << endl << endl;

    // Аппроксимация
    cout << "ЛИНЕЙНАЯ АППРОКСИМАЦИЯ" << endl;
    cout << "Уравнение прямой: T(t) = " << apox_vector[0] << " * t + " << apox_vector[1] << endl;
    cout << "- Коэффициент a (скорость изменения): " << apox_vector[0] << " °C/сек" << endl;
    cout << "- Коэффициент b (начальное смещение): " << apox_vector[1] << " °C" << endl << endl;

    // Корреляционный анализ
    cout << "КОРРЕЛЯЦИОННЫЙ АНАЛИЗ" << endl;
    cout << "- Коэффициент корреляции Пирсона: " << results[0].second << endl;
    cout << "  (Значение близкое к -1 показывает сильную обратную зависимость)" << endl << endl;

    // Таблица результатов
    cout << "ТАБЛИЦА ТЕМПЕРАТУР" << endl;
    cout << "|-------|-------------|------------------|" << endl;
    cout << "| Время | Температура | Корреляция (r)   |" << endl;
    cout << "|-------|-------------|------------------|" << endl;
    
    int t = 0;
    for (const auto& result : results) {
        cout << "| " << setw(5) << t << " | " << setw(11) << fixed << setprecision(2) << result.first 
             << " | " << setw(16) << result.second << " |" << endl;
        t++;
    }
    cout << "|-------|-------------|------------------|" << endl;

    return 0;
}
